class Node(object):
    def __init__(self, val = None,min_ = None):
        self.val = val
        self.min = min_

class MinStack(object):

    def __init__(self):
        self.stack = []

    def push(self, val):
        """
        :type val: int
        :rtype: None
        """
        if self.stack and self.stack[-1].min < val:
            min_ = self.stack[-1].min
        else:
            min_ = val
        self.stack.append(Node(val,min_))

    def pop(self):
        """
        :rtype: None
        """
        if self.stack:
            self.stack.pop()
        

    def top(self):
        """
        :rtype: int
        """
        if self.stack:
            return self.stack[-1].val
        

    def getMin(self):
        """
        :rtype: int
        """
        if self.stack:
            return self.stack[-1].min


# Your MinStack object will be instantiated and called as such:
# obj = MinStack()
# obj.push(val)
# obj.pop()
# param_3 = obj.top()
# param_4 = obj.getMin()
