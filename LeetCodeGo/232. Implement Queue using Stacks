type MyQueue struct {
    s1 []int
    s2 []int
}

// Constructor initializes the queue
func Constructor() MyQueue {
    return MyQueue{s1: make([]int, 0), s2: make([]int, 0)}
}

// Push adds an element to the end of the queue
func (this *MyQueue) Push(x int) {
    this.s1 = append(this.s1, x)
}

// Pop removes and returns the front element of the queue
func (this *MyQueue) Pop() int {
    if len(this.s2) == 0 {
        for len(this.s1) > 0 {
            this.s2 = append(this.s2, this.s1[len(this.s1)-1])
            this.s1 = this.s1[:len(this.s1)-1]
        }
    }
    res := this.s2[len(this.s2)-1]
    this.s2 = this.s2[:len(this.s2)-1]
    return res
}

// Peek returns the front element without removing it
func (this *MyQueue) Peek() int {
    if len(this.s2) == 0 {
        for len(this.s1) > 0 {
            this.s2 = append(this.s2, this.s1[len(this.s1)-1])
            this.s1 = this.s1[:len(this.s1)-1]
        }
    }
    return this.s2[len(this.s2)-1]
}

// Empty checks if the queue is empty
func (this *MyQueue) Empty() bool {
    return len(this.s1) == 0 && len(this.s2) == 0
}

/**
 * Your MyQueue object will be instantiated and called as such:
 * obj := Constructor();
 * obj.Push(x);
 * param_2 := obj.Pop();
 * param_3 := obj.Peek();
 * param_4 := obj.Empty();
 */
